{"version":3,"sources":["../src/actions/transferAction.ts","../src/environment.ts","../src/constants/index.ts","../src/hooks/useGetAccount.ts","../src/hooks/useGetWalletClient.ts","../src/utils/viemHelpers.ts","../src/actions/getBalanceAction.ts","../src/actions/deployTokenAction.ts","../src/constants/contracts/basicToken.json","../src/index.ts"],"sourcesContent":["import type { Action } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype Content,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\telizaLogger,\n\tcomposeContext,\n\tgenerateObject,\n\tstringToUuid,\n} from \"@elizaos/core\";\nimport { validateAbstractConfig } from \"../environment\";\n\nimport { erc20Abi, formatUnits, isAddress, parseUnits, type Hash } from \"viem\";\nimport { abstractTestnet } from \"viem/chains\";\nimport { createAbstractClient } from \"@abstract-foundation/agw-client\";\nimport { z } from \"zod\";\nimport { ETH_ADDRESS } from \"../constants\";\nimport { useGetAccount, useGetWalletClient } from \"../hooks\";\nimport {\n\tresolveAddress,\n\tabstractPublicClient,\n\tgetTokenByName,\n} from \"../utils/viemHelpers\";\n\n// Define types for Abstract client\ninterface AbstractTransactionRequest {\n\tchain: typeof abstractTestnet;\n\tto: string;\n\tvalue: bigint;\n\tkzg: undefined;\n}\n\ninterface AbstractContractRequest {\n\tchain: typeof abstractTestnet;\n\taddress: string;\n\tabi: typeof erc20Abi;\n\tfunctionName: string;\n\targs: [string, bigint];\n}\n\ninterface AbstractClient {\n\tsendTransaction: (request: AbstractTransactionRequest) => Promise<Hash>;\n\twriteContract: (request: AbstractContractRequest) => Promise<Hash>;\n}\n\nconst TransferSchema = z.object({\n\ttokenAddress: z.string().optional().nullable(),\n\trecipient: z.string(),\n\tamount: z.string(),\n\tuseAGW: z.boolean(),\n\ttokenSymbol: z.string().optional().nullable(),\n});\n\nconst validatedTransferSchema = z.object({\n\ttokenAddress: z\n\t\t.string()\n\t\t.refine(isAddress, { message: \"Invalid token address\" }),\n\trecipient: z\n\t\t.string()\n\t\t.refine(isAddress, { message: \"Invalid recipient address\" }),\n\tamount: z.string(),\n\tuseAGW: z.boolean(),\n});\n\nexport interface TransferContent extends Content {\n\ttokenAddress: string;\n\trecipient: string;\n\tamount: string | number;\n\tuseAGW: boolean;\n\ttokenSymbol?: string;\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"<TOKEN_ADDRESS>\",\n    \"recipient\": \"<TOKEN_ADDRESS>\",\n    \"amount\": \"1000\",\n    \"useAGW\": true,\n    \"tokenSymbol\": \"USDC\"\n}\n\\`\\`\\`\n\nUser message:\n\"{{currentMessage}}\"\n\nGiven the message, extract the following information about the requested token transfer:\n- Token contract address\n- Recipient wallet address\n- Amount to transfer\n- Whether to use Abstract Global Wallet aka AGW\n- The symbol of the token that wants to be transferred. Between 1 to 6 characters usually.\n\nIf the user did not specify \"global wallet\", \"AGW\", \"agw\", or \"abstract global wallet\" in their message, set useAGW to false, otherwise set it to true.\ns\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport const transferAction: Action = {\n\n\tname: \"SEND_TOKEN\",\n\tsimiles: [\n\t\t\"TRANSFER_TOKEN_ON_ABSTRACT\",\n\t\t\"TRANSFER_TOKENS_ON_ABSTRACT\",\n\t\t\"SEND_TOKENS_ON_ABSTRACT\",\n\t\t\"SEND_ETH_ON_ABSTRACT\",\n\t\t\"PAY_ON_ABSTRACT\",\n\t\t\"MOVE_TOKENS_ON_ABSTRACT\",\n\t\t\"MOVE_ETH_ON_ABSTRACT\",\n\t],\n\t// eslint-disable-next-line\n\tvalidate: async (runtime: IAgentRuntime) => {\n\t\tawait validateAbstractConfig(runtime);\n\t\treturn true;\n\t},\n\tdescription: \"Transfer tokens from the agent's wallet to another address\",\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n\t\telizaLogger.log(\"Starting Abstract SEND_TOKEN handler...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n\t\t// Compose transfer context\n\t\tcurrentState.currentMessage = `${currentState.recentMessagesData[1].content.text}`;\n\t\tconst transferContext = composeContext({\n\t\t\tstate: currentState,\n\t\t\ttemplate: transferTemplate,\n\t\t});\n\n\t\t// Generate transfer content\n\t\tconst content = (\n\t\t\tawait generateObject({\n\t\t\t\truntime,\n\t\t\t\tcontext: transferContext,\n\t\t\t\tmodelClass: ModelClass.SMALL,\n\t\t\t\tschema: TransferSchema,\n\t\t\t})\n\t\t).object as TransferContent;\n\n\t\tlet tokenAddress = content.tokenAddress;\n\n\t\tif (content.tokenSymbol) {\n\t\t\tconst tokenMemory = await runtime.messageManager.getMemoryById(\n\t\t\t\tstringToUuid(`${content.tokenSymbol}-${runtime.agentId}`),\n\t\t\t);\n\n\t\t\tif (typeof tokenMemory?.content?.tokenAddress === \"string\") {\n\t\t\t\ttokenAddress = tokenMemory.content.tokenAddress;\n\t\t\t}\n\n\t\t\tif (!tokenAddress) {\n\t\t\t\ttokenAddress = getTokenByName(content.tokenSymbol)?.address;\n\t\t\t}\n\t\t}\n\n\t\tconst resolvedRecipient = await resolveAddress(content.recipient);\n\n\t\tconst input = {\n\t\t\ttokenAddress: tokenAddress,\n\t\t\trecipient: resolvedRecipient,\n\t\t\tamount: content.amount.toString(),\n\t\t\tuseAGW: content.useAGW,\n\t\t};\n\t\tconst result = validatedTransferSchema.safeParse(input);\n\n\t\tif (!result.success) {\n\t\t\telizaLogger.error(\n\t\t\t\t\"Invalid content for TRANSFER_TOKEN action.\",\n\t\t\t\tresult.error.message,\n\t\t\t);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: \"Unable to process transfer request. Did not extract valid parameters.\",\n\t\t\t\t\tcontent: { error: result.error.message, ...input },\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!resolvedRecipient) {\n\t\t\tthrow new Error(\"Invalid recipient address or ENS name\");\n\t\t}\n\n\t\ttry {\n\t\t\tconst account = useGetAccount(runtime);\n\n\t\t\tlet symbol = \"ETH\";\n\t\t\tlet decimals = 18;\n\t\t\tconst isEthTransfer = result.data.tokenAddress === ETH_ADDRESS;\n\t\t\tconst { tokenAddress, recipient, amount, useAGW } = result.data;\n\n\t\t\tif (!isEthTransfer) {\n\t\t\t\t[symbol, decimals] = await Promise.all([\n\t\t\t\t\tabstractPublicClient.readContract({\n\t\t\t\t\t\taddress: tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"symbol\",\n\t\t\t\t\t}),\n\t\t\t\t\tabstractPublicClient.readContract({\n\t\t\t\t\t\taddress: tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"decimals\",\n\t\t\t\t\t}),\n\t\t\t\t]);\n\t\t\t}\n\t\t\tlet hash: Hash;\n\t\t\tconst tokenAmount = parseUnits(amount.toString(), decimals);\n\n\t\t\tif (useAGW) {\n\t\t\t\tconst abstractClient = (await createAbstractClient({\n\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\tsigner: account,\n\t\t\t\t})) as AbstractClient;\n\n\t\t\t\tif (isEthTransfer) {\n\t\t\t\t\thash = await abstractClient.sendTransaction({\n\t\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\t\tto: recipient,\n\t\t\t\t\t\tvalue: tokenAmount,\n\t\t\t\t\t\tkzg: undefined,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\thash = await abstractClient.writeContract({\n\t\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\t\taddress: tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"transfer\",\n\t\t\t\t\t\targs: [recipient, tokenAmount],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst walletClient = useGetWalletClient();\n\t\t\t\tif (isEthTransfer) {\n\t\t\t\t\thash = await walletClient.sendTransaction({\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\t\tto: recipient,\n\t\t\t\t\t\tvalue: tokenAmount,\n\t\t\t\t\t\tkzg: undefined,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\thash = await walletClient.writeContract({\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\t\taddress: tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"transfer\",\n\t\t\t\t\t\targs: [recipient, tokenAmount],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telizaLogger.success(\n\t\t\t\t`Transfer completed successfully! Transaction hash: ${hash}`,\n\t\t\t);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Transfer completed successfully! Succesfully sent ${formatUnits(tokenAmount, decimals)} ${symbol} to ${recipient} using ${useAGW ? \"AGW\" : \"wallet client\"}. Transaction hash: ${hash}`,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\thash,\n\t\t\t\t\t\ttokenAmount: formatUnits(tokenAmount, decimals),\n\t\t\t\t\t\tsymbol,\n\t\t\t\t\t\trecipient,\n\t\t\t\t\t\tuseAGW,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\telizaLogger.error(\"Error during token transfer:\", error);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Error transferring tokens: ${error.message}`,\n\t\t\t\t\tcontent: { error: error.message },\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\n\texamples: [\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Send 0.01 ETH to 0x114B242D931B47D5cDcEe7AF065856f70ee278C4\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Sure, I'll send 0.01 ETH to that address now.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 0.01 ETH to 0x114B242D931B47D5cDcEe7AF065856f70ee278C4\\nTransaction: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Send 0.01 ETH to 0x114B242D931B47D5cDcEe7AF065856f70ee278C4 using your abstract global wallet\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Sure, I'll send 0.01 ETH to that address now using my AGW.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 0.01 ETH to 0x114B242D931B47D5cDcEe7AF065856f70ee278C4\\nTransaction: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b using my AGW\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Send 0.01 ETH to alim.getclave.eth\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Sure, I'll send 0.01 ETH to alim.getclave.eth now.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 0.01 ETH to alim.getclave.eth\\nTransaction: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Send 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Sure, I'll send 100 USDC to that address now.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62\\nTransaction: 0x4fed598033f0added272c3ddefd4d83a521634a738474400b27378db462a76ec\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Please send 0.1 ETH to 0xbD8679cf79137042214fA4239b02F4022208EE82\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Of course. Sending 0.1 ETH to that address now.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 0.1 ETH to 0xbD8679cf79137042214fA4239b02F4022208EE82\\nTransaction: 0x0b9f23e69ea91ba98926744472717960cc7018d35bc3165bdba6ae41670da0f0\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Please send 1 MyToken to 0xbD8679cf79137042214fA4239b02F4022208EE82\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Of course. Sending 1 MyToken right away.\",\n\t\t\t\t\taction: \"SEND_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully sent 1 MyToken to 0xbD8679cf79137042214fA4239b02F4022208EE82\\nTransaction: 0x0b9f23e69ea91ba98926744472717960cc7018d35bc3165bdba6ae41670da0f0\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t] as ActionExample[][],\n};\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { isAddress } from \"viem\";\nimport { z } from \"zod\";\n\nexport const abstractEnvSchema = z.object({\n\tABSTRACT_ADDRESS: z\n\t\t.string()\n\t\t.min(1, \"Abstract address is required\")\n\t\t.refine((address) => isAddress(address, { strict: false }), {\n\t\t\tmessage: \"Abstract address must be a valid address\",\n\t\t}),\n\tABSTRACT_PRIVATE_KEY: z\n\t\t.string()\n\t\t.min(1, \"Abstract private key is required\")\n\t\t.refine((key) => /^[a-fA-F0-9]{64}$/.test(key), {\n\t\t\tmessage:\n\t\t\t\t\"Abstract private key must be a 64-character hexadecimal string (32 bytes) without the '0x' prefix\",\n\t\t}),\n});\n\nexport type AbstractConfig = z.infer<typeof abstractEnvSchema>;\n\nexport async function validateAbstractConfig(\n\truntime: IAgentRuntime,\n): Promise<AbstractConfig> {\n\ttry {\n\t\tconst config = {\n\t\t\tABSTRACT_ADDRESS: runtime.getSetting(\"ABSTRACT_ADDRESS\"),\n\t\t\tABSTRACT_PRIVATE_KEY: runtime.getSetting(\"ABSTRACT_PRIVATE_KEY\"),\n\t\t};\n\n\t\treturn abstractEnvSchema.parse(config);\n\t} catch (error) {\n\t\tif (error instanceof z.ZodError) {\n\t\t\tconst errorMessages = error.errors\n\t\t\t\t.map((err) => `${err.path.join(\".\")}: ${err.message}`)\n\t\t\t\t.join(\"\\n\");\n\t\t\tthrow new Error(\n\t\t\t\t`Abstract configuration validation failed:\\n${errorMessages}`,\n\t\t\t);\n\t\t}\n\t\tthrow error;\n\t}\n}\n","export const ETH_ADDRESS = \"0x000000000000000000000000000000000000800A\";\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport type { PrivateKeyAccount } from \"viem/accounts\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nexport const useGetAccount = (runtime: IAgentRuntime): PrivateKeyAccount => {\n\tconst PRIVATE_KEY = runtime.getSetting(\"ABSTRACT_PRIVATE_KEY\");\n\tif (!PRIVATE_KEY) {\n\t\tthrow new Error(\"ABSTRACT_PRIVATE_KEY is not set\");\n\t}\n\treturn privateKeyToAccount(`0x${PRIVATE_KEY}`);\n};\n","import { createWalletClient, http } from \"viem\";\nimport { abstractTestnet } from \"viem/chains\";\nimport { eip712WalletActions } from \"viem/zksync\";\n\nexport const useGetWalletClient = (): ReturnType<typeof createWalletClient> => {\n\tconst client = createWalletClient({\n\t\tchain: abstractTestnet,\n\t\ttransport: http(),\n\t}).extend(eip712WalletActions());\n\n\treturn client;\n};\n","import {\n\ttype Address,\n\tcreatePublicClient,\n\tgetAddress,\n\thttp,\n\tisAddress,\n\ttype PublicClient,\n} from \"viem\";\nimport { abstractTestnet, mainnet } from \"viem/chains\";\nimport { normalize } from \"viem/ens\";\nimport { elizaLogger } from \"@elizaos/core\";\nimport { ETH_ADDRESS } from \"../constants\";\n\nimport {\n\ttype Account,\n\ttype Client,\n\tcreateClient,\n\tcreateWalletClient,\n\ttype Transport,\n} from \"viem\";\nimport { toAccount } from \"viem/accounts\";\nimport type { ChainEIP712 } from \"viem/zksync\";\n\nimport { getSmartAccountAddressFromInitialSigner } from \"./utils.js\";\nimport {\n\ttype AbstractWalletActions,\n\tglobalWalletActions,\n} from \"./walletActions.js\";\n\n// Shared clients\nexport const ethereumClient = createPublicClient({\n\tchain: mainnet,\n\ttransport: http(),\n});\n\nexport const abstractPublicClient = createPublicClient({\n\tchain: abstractTestnet,\n\ttransport: http(),\n});\n\n// Helper to resolve ENS names\nexport async function resolveAddress(\n\taddressOrEns: string,\n): Promise<Address | null> {\n\tif (isAddress(addressOrEns)) {\n\t\treturn getAddress(addressOrEns);\n\t}\n\n\tlet address: string;\n\ttry {\n\t\tconst name = normalize(addressOrEns.trim());\n\t\tconst resolved = await ethereumClient.getEnsAddress({ name });\n\t\tif (resolved) {\n\t\t\taddress = resolved;\n\t\t\telizaLogger.log(`Resolved ${name} to ${resolved}`);\n\t\t}\n\t} catch (error) {\n\t\telizaLogger.error(\"Error resolving ENS name:\", error);\n\t}\n\n\treturn address ? getAddress(address) : null;\n}\n\nconst tokens = [\n\t{\n\t\taddress: ETH_ADDRESS,\n\t\tsymbol: \"ETH\",\n\t\tdecimals: 18,\n\t},\n\t{\n\t\taddress: \"0xe4c7fbb0a626ed208021ccaba6be1566905e2dfc\",\n\t\tsymbol: \"USDC\",\n\t\tdecimals: 6,\n\t},\n];\n\nexport function getTokenByName(name: string) {\n\tconst token = tokens.find(\n\t\t(token) => token.symbol.toLowerCase() === name.toLowerCase(),\n\t);\n\n\tif (!token) {\n\t\tthrow new Error(`Token ${name} not found`);\n\t}\n\n\treturn token;\n}\n","import type { Action } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype Content,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\telizaLogger,\n\tcomposeContext,\n\tgenerateObject,\n\tstringToUuid,\n} from \"@elizaos/core\";\nimport { validateAbstractConfig } from \"../environment\";\n\nimport { erc20Abi, formatUnits, isAddress } from \"viem\";\nimport { z } from \"zod\";\nimport { ETH_ADDRESS } from \"../constants\";\nimport { useGetAccount } from \"../hooks\";\nimport {\n\tresolveAddress,\n\tgetTokenByName,\n\tabstractPublicClient,\n} from \"../utils/viemHelpers\";\n\nconst BalanceSchema = z.object({\n\ttokenAddress: z.string().optional().nullable(),\n\twalletAddress: z.string().optional().nullable(),\n\ttokenSymbol: z.string().optional().nullable(),\n});\n\nexport interface BalanceContent extends Content {\n\ttokenAddress?: string;\n\twalletAddress?: string;\n\ttokenSymbol?: string;\n}\n\nconst validatedSchema = z.object({\n\ttokenAddress: z\n\t\t.string()\n\t\t.refine(isAddress, { message: \"Invalid token address\" }),\n\twalletAddress: z\n\t\t.string()\n\t\t.refine(isAddress, { message: \"Invalid token address\" }),\n});\n\nconst balanceTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"<TOKEN_ADDRESS>\",\n    \"walletAddress\": \"<TOKEN_ADDRESS>\",\n    \"tokenSymbol\": \"USDC\"\n}\n\\`\\`\\`\n\nUser message:\n\"{{currentMessage}}\"\n\nGiven the message, extract the following information about the requested balance check:\n- Token contract address (optional, if not specified set to null)\n- Wallet address to check (optional, if not specified set to null)\n- The symbol of the token to check (optional, if not specified set to null). Between 1 to 6 characters usually.\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport const getBalanceAction: Action = {\n\tname: \"GET_BALANCE\",\n\tsimiles: [\n\t\t\"CHECK_BALANCE\",\n\t\t\"VIEW_BALANCE\",\n\t\t\"SHOW_BALANCE\",\n\t\t\"BALANCE_CHECK\",\n\t\t\"TOKEN_BALANCE\",\n\t],\n\tvalidate: async (runtime: IAgentRuntime, _message: Memory) => {\n\t\tawait validateAbstractConfig(runtime);\n\t\treturn true;\n\t},\n\tdescription: \"Check token balance for a given address\",\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n\t\telizaLogger.log(\"Starting Abstract GET_BALANCE handler...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n\t\t// Compose balance context\n\t\tcurrentState.currentMessage = `${currentState.recentMessagesData[1].content.text}`;\n\t\tconst balanceContext = composeContext({\n\t\t\tstate: currentState,\n\t\t\ttemplate: balanceTemplate,\n\t\t});\n\n\t\t// Generate balance content\n\t\tconst content = (\n\t\t\tawait generateObject({\n\t\t\t\truntime,\n\t\t\t\tcontext: balanceContext,\n\t\t\t\tmodelClass: ModelClass.SMALL,\n\t\t\t\tschema: BalanceSchema,\n\t\t\t})\n\t\t).object as BalanceContent;\n\n\t\ttry {\n\t\t\tconst account = useGetAccount(runtime);\n\t\t\tconst addressToCheck = content.walletAddress || account.address;\n\n\t\t\t// Resolve address\n\t\t\tconst resolvedAddress = await resolveAddress(addressToCheck);\n\t\t\tif (!resolvedAddress) {\n\t\t\t\tthrow new Error(\"Invalid address or ENS name\");\n\t\t\t}\n\n\t\t\tlet tokenAddress = content.tokenAddress;\n\n\t\t\tif (content.tokenSymbol) {\n\t\t\t\tconst tokenMemory = await runtime.messageManager.getMemoryById(\n\t\t\t\t\tstringToUuid(`${content.tokenSymbol}-${runtime.agentId}`),\n\t\t\t\t);\n\n\t\t\t\tif (typeof tokenMemory?.content?.tokenAddress === \"string\") {\n\t\t\t\t\ttokenAddress = tokenMemory.content.tokenAddress;\n\t\t\t\t}\n\n\t\t\t\tif (!tokenAddress) {\n\t\t\t\t\ttokenAddress = getTokenByName(content.tokenSymbol)?.address;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = validatedSchema.safeParse({\n\t\t\t\ttokenAddress: tokenAddress || ETH_ADDRESS,\n\t\t\t\twalletAddress: resolvedAddress,\n\t\t\t});\n\n\t\t\t// Validate transfer content\n\t\t\tif (!result.success) {\n\t\t\t\telizaLogger.error(\"Invalid content for GET_BALANCE action.\");\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\ttext: \"Unable to process balance request. Invalid content provided.\",\n\t\t\t\t\t\tcontent: { error: \"Invalid balance content\" },\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tlet balance: bigint;\n\t\t\tlet symbol: string;\n\t\t\tlet decimals: number;\n\n\t\t\t// Query balance based on token type\n\t\t\tif (result.data.tokenAddress === ETH_ADDRESS) {\n\t\t\t\tbalance = await abstractPublicClient.getBalance({\n\t\t\t\t\taddress: resolvedAddress,\n\t\t\t\t});\n\t\t\t\tsymbol = \"ETH\";\n\t\t\t\tdecimals = 18;\n\t\t\t} else {\n\t\t\t\t[balance, decimals, symbol] = await Promise.all([\n\t\t\t\t\tabstractPublicClient.readContract({\n\t\t\t\t\t\taddress: result.data.tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"balanceOf\",\n\t\t\t\t\t\targs: [resolvedAddress],\n\t\t\t\t\t}),\n\t\t\t\t\tabstractPublicClient.readContract({\n\t\t\t\t\t\taddress: result.data.tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"decimals\",\n\t\t\t\t\t}),\n\t\t\t\t\tabstractPublicClient.readContract({\n\t\t\t\t\t\taddress: result.data.tokenAddress,\n\t\t\t\t\t\tabi: erc20Abi,\n\t\t\t\t\t\tfunctionName: \"symbol\",\n\t\t\t\t\t}),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tconst formattedBalance = formatUnits(balance, decimals);\n\n\t\t\telizaLogger.success(`Balance check completed for ${resolvedAddress}`);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Balance for ${resolvedAddress}: ${formattedBalance} ${symbol}`,\n\t\t\t\t\tcontent: { balance: formattedBalance, symbol: symbol },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\telizaLogger.error(\"Error checking balance:\", error);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Error checking balance: ${error.message}`,\n\t\t\t\t\tcontent: { error: error.message },\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\n\texamples: [\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"What's my ETH balance?\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Let me check your ETH balance.\",\n\t\t\t\t\taction: \"GET_BALANCE\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Your ETH balance is 1.5 ETH\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Check USDC balance for 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"I'll check the USDC balance for that address.\",\n\t\t\t\t\taction: \"GET_BALANCE\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"The USDC balance for 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 is 100 USDC\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Check balance for 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 with token 0xe4c7fbb0a626ed208021ccaba6be1566905e2dfc\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Let me check the balance for that address.\",\n\t\t\t\t\taction: \"GET_BALANCE\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"The balance for 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 with token 0xe4c7fbb0a626ed208021ccaba6be1566905e2dfc is 100\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t] as ActionExample[][],\n};\n","import type { Action } from \"@elizaos/core\";\nimport {\n\ttype ActionExample,\n\ttype Content,\n\ttype HandlerCallback,\n\ttype IAgentRuntime,\n\ttype Memory,\n\tModelClass,\n\ttype State,\n\telizaLogger,\n\tcomposeContext,\n\tgenerateObject,\n\tstringToUuid,\n} from \"@elizaos/core\";\nimport { validateAbstractConfig } from \"../environment\";\nimport { parseEther, type Hash } from \"viem\";\nimport { abstractTestnet } from \"viem/chains\";\nimport {\n\ttype AbstractClient,\n\tcreateAbstractClient,\n} from \"@abstract-foundation/agw-client\";\nimport { z } from \"zod\";\nimport { useGetAccount, useGetWalletClient } from \"../hooks\";\nimport basicToken from \"../constants/contracts/basicToken.json\";\nimport { abstractPublicClient } from \"../utils/viemHelpers\";\n\nconst DeploySchema = z.object({\n\tname: z.string(),\n\tsymbol: z.string(),\n\tinitialSupply: z.string(),\n\tuseAGW: z.boolean(),\n});\n\nconst validatedSchema = z.object({\n\tname: z.string().min(1, \"Name is required\"),\n\tsymbol: z\n\t\t.string()\n\t\t.min(1, \"Symbol is required\")\n\t\t.max(5, \"Symbol must be 5 characters or less\"),\n\tinitialSupply: z\n\t\t.string()\n\t\t.refine((val) => !Number.isNaN(Number(val)) && Number(val) > 0, {\n\t\t\tmessage: \"Initial supply must be a positive number\",\n\t\t}),\n\tuseAGW: z.boolean(),\n});\n\nexport interface DeployContent extends Content {\n\tname: string;\n\tsymbol: string;\n\tinitialSupply: string;\n\tuseAGW: boolean;\n}\n\nconst deployTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"My Token\",\n    \"symbol\": \"MTK\",\n    \"initialSupply\": \"1000000\",\n    \"useAGW\": true\n}\n\\`\\`\\`\n\nUser message:\n\"{{currentMessage}}\"\n\nGiven the message, extract the following information about the requested token deployment:\n- Token name\n- Token symbol (usually 3-4 characters)\n- Initial supply amount\n- Whether to use Abstract Global Wallet aka AGW\n\nIf the user did not specify \"global wallet\", \"AGW\", \"agw\", or \"abstract global wallet\" in their message, set useAGW to false, otherwise set it to true.\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport const deployTokenAction: Action = {\n\tname: \"DEPLOY_TOKEN\",\n\tsimiles: [\n\t\t\"CREATE_TOKEN\",\n\t\t\"DEPLOY_NEW_TOKEN\",\n\t\t\"CREATE_NEW_TOKEN\",\n\t\t\"LAUNCH_TOKEN\",\n\t],\n\tvalidate: async (runtime: IAgentRuntime) => {\n\t\tawait validateAbstractConfig(runtime);\n\t\treturn true;\n\t},\n\tdescription: \"Deploy a new ERC20 token contract\",\n\thandler: async (\n\t\truntime: IAgentRuntime,\n\t\tmessage: Memory,\n\t\tstate: State,\n\t\t_options: { [key: string]: unknown },\n\t\tcallback?: HandlerCallback,\n\t): Promise<boolean> => {\n\t\telizaLogger.log(\"Starting Abstract DEPLOY_TOKEN handler...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n\t\tcurrentState.currentMessage = `${currentState.recentMessagesData[1].content.text}`;\n\t\tconst deployContext = composeContext({\n\t\t\tstate: currentState,\n\t\t\ttemplate: deployTemplate,\n\t\t});\n\n\t\tconst content = (\n\t\t\tawait generateObject({\n\t\t\t\truntime,\n\t\t\t\tcontext: deployContext,\n\t\t\t\tmodelClass: ModelClass.SMALL,\n\t\t\t\tschema: DeploySchema,\n\t\t\t})\n\t\t).object as DeployContent;\n\n\t\t// Validate deployment content\n\t\tconst result = validatedSchema.safeParse(content);\n\t\tif (!result.success) {\n\t\t\telizaLogger.error(\"Invalid content for DEPLOY_TOKEN action.\", {\n\t\t\t\terrors: result.error.errors,\n\t\t\t});\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: \"Unable to process token deployment request. Invalid parameters provided.\",\n\t\t\t\t\tcontent: { error: \"Invalid deployment parameters\" },\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst account = useGetAccount(runtime);\n\t\t\tconst supply = parseEther(content.initialSupply);\n\t\t\tlet hash: Hash;\n\n\t\t\tif (content.useAGW) {\n\t\t\t\tconst abstractClient = (await createAbstractClient({\n\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\tsigner: account,\n\t\t\t\t})) as any; // type being exported as never\n\n\t\t\t\thash = await abstractClient.deployContract({\n\t\t\t\t\tabi: basicToken.abi,\n\t\t\t\t\tbytecode: basicToken.bytecode,\n\t\t\t\t\targs: [result.data.name, result.data.symbol, supply],\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst walletClient = useGetWalletClient();\n\n\t\t\t\thash = await walletClient.deployContract({\n\t\t\t\t\tchain: abstractTestnet,\n\t\t\t\t\taccount,\n\t\t\t\t\tabi: basicToken.abi,\n\t\t\t\t\tbytecode: basicToken.bytecode,\n\t\t\t\t\targs: [result.data.name, result.data.symbol, supply],\n\t\t\t\t\tkzg: undefined,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Wait for transaction receipt\n\t\t\tconst receipt = await abstractPublicClient.waitForTransactionReceipt({\n\t\t\t\thash,\n\t\t\t});\n\t\t\tconst contractAddress = receipt.contractAddress;\n\n\t\t\telizaLogger.success(\n\t\t\t\t`Token deployment completed! Contract address: ${contractAddress}. Transaction hash: ${hash}`,\n\t\t\t);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Token \"${result.data.name}\" (${result.data.symbol}) deployed successfully! Contract address: ${contractAddress} and transaction hash: ${hash}`,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\thash,\n\t\t\t\t\t\ttokenName: result.data.name,\n\t\t\t\t\t\ttokenSymbol: result.data.symbol,\n\t\t\t\t\t\tcontractAddress,\n\t\t\t\t\t\ttransactionHash: hash,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst metadata = {\n\t\t\t\ttokenAddress: contractAddress,\n\t\t\t\tname: result.data.name,\n\t\t\t\tsymbol: result.data.symbol,\n\t\t\t\tinitialSupply: String(result.data.initialSupply),\n\t\t\t};\n\n\t\t\tawait runtime.messageManager.createMemory({\n\t\t\t\tid: stringToUuid(`${result.data.symbol}-${runtime.agentId}`),\n\t\t\t\tuserId: runtime.agentId,\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: `Token deployed: ${result.data.name}, symbol: ${result.data.symbol} and contract address: ${contractAddress}`,\n\t\t\t\t\t...metadata,\n\t\t\t\t\tsource: \"abstract_token_deployment\",\n\t\t\t\t},\n\t\t\t\tagentId: runtime.agentId,\n\t\t\t\troomId: stringToUuid(`tokens-${runtime.agentId}`),\n\t\t\t\tcreatedAt: Date.now(),\n\t\t\t});\n\t\t\telizaLogger.success(\"memory saved for token deployment\", metadata);\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\telizaLogger.error(\"Error during token deployment:\", error);\n\t\t\tif (callback) {\n\t\t\t\tcallback({\n\t\t\t\t\ttext: `Error deploying token: ${error.message}`,\n\t\t\t\t\tcontent: { error: error.message },\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\n\texamples: [\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Deploy a new token called MyToken with symbol MTK and initial supply of 1000000\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"I'll deploy your new token now.\",\n\t\t\t\t\taction: \"DEPLOY_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully deployed MyToken (MTK) with 1000000 initial supply.\\nContract address: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b\\nTransaction hash: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tuser: \"{{user1}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Create a new token using AGW with name TestCoin, symbol TEST, and 5000 supply\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"I'll deploy your token using the Abstract Global Wallet.\",\n\t\t\t\t\taction: \"DEPLOY_TOKEN\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser: \"{{agent}}\",\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: \"Successfully deployed TestCoin (TEST) with 5000 initial supply using AGW.\\nContract address: 0xdde850f9257365fffffc11324726ebdcf5b90b01c6eec9b3e7ab3e81fde6f14b\\nTransaction: 0x4fed598033f0added272c3ddefd4d83a521634a738474400b27378db462a76ec\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t] as ActionExample[][],\n};\n","{\n    \"_format\": \"hh-sol-artifact-1\",\n    \"contractName\": \"BasicToken\",\n    \"sourceName\": \"contracts/BasicToken.sol\",\n    \"abi\": [\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"name\",\n                    \"type\": \"string\"\n                },\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"symbol\",\n                    \"type\": \"string\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"initialSupply\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"constructor\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"spender\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"allowance\",\n                    \"type\": \"uint256\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"needed\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"ERC20InsufficientAllowance\",\n            \"type\": \"error\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"sender\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"balance\",\n                    \"type\": \"uint256\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"needed\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"ERC20InsufficientBalance\",\n            \"type\": \"error\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"approver\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"ERC20InvalidApprover\",\n            \"type\": \"error\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"receiver\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"ERC20InvalidReceiver\",\n            \"type\": \"error\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"sender\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"ERC20InvalidSender\",\n            \"type\": \"error\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"spender\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"ERC20InvalidSpender\",\n            \"type\": \"error\"\n        },\n        {\n            \"anonymous\": false,\n            \"inputs\": [\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"spender\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": false,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"Approval\",\n            \"type\": \"event\"\n        },\n        {\n            \"anonymous\": false,\n            \"inputs\": [\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"indexed\": false,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"Transfer\",\n            \"type\": \"event\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"spender\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"allowance\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"spender\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"approve\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                }\n            ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"account\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"balanceOf\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"decimals\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint8\",\n                    \"name\": \"\",\n                    \"type\": \"uint8\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"name\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"symbol\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"totalSupply\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"transfer\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                }\n            ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"value\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"transferFrom\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                }\n            ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        }\n    ],\n    \"bytecode\": \"0x608060405234801561001057600080fd5b506040516117bf3803806117bf833981810160405281019061003291906104c6565b828281600390816100439190610768565b5080600490816100539190610768565b505050610066338261006e60201b60201c565b50505061095a565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100e05760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016100d7919061087b565b60405180910390fd5b6100f2600083836100f660201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361014857806002600082825461013c91906108c5565b9250508190555061021b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156101d4578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016101cb93929190610908565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361026457806002600082825403925050819055506102b1565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161030e919061093f565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038282610339565b810181811067ffffffffffffffff821117156103a1576103a061034a565b5b80604052505050565b60006103b461031b565b90506103c08282610379565b919050565b600067ffffffffffffffff8211156103e0576103df61034a565b5b6103e982610339565b9050602081019050919050565b60005b838110156104145780820151818401526020810190506103f9565b60008484015250505050565b600061043361042e846103c5565b6103aa565b90508281526020810184848401111561044f5761044e610334565b5b61045a8482856103f6565b509392505050565b600082601f8301126104775761047661032f565b5b8151610487848260208601610420565b91505092915050565b6000819050919050565b6104a381610490565b81146104ae57600080fd5b50565b6000815190506104c08161049a565b92915050565b6000806000606084860312156104df576104de610325565b5b600084015167ffffffffffffffff8111156104fd576104fc61032a565b5b61050986828701610462565b935050602084015167ffffffffffffffff81111561052a5761052961032a565b5b61053686828701610462565b9250506040610547868287016104b1565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105a357607f821691505b6020821081036105b6576105b561055c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261061e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826105e1565b61062886836105e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061066561066061065b84610490565b610640565b610490565b9050919050565b6000819050919050565b61067f8361064a565b61069361068b8261066c565b8484546105ee565b825550505050565b600090565b6106a861069b565b6106b3818484610676565b505050565b5b818110156106d7576106cc6000826106a0565b6001810190506106b9565b5050565b601f82111561071c576106ed816105bc565b6106f6846105d1565b81016020851015610705578190505b610719610711856105d1565b8301826106b8565b50505b505050565b600082821c905092915050565b600061073f60001984600802610721565b1980831691505092915050565b6000610758838361072e565b9150826002028217905092915050565b61077182610551565b67ffffffffffffffff81111561078a5761078961034a565b5b610794825461058b565b61079f8282856106db565b600060209050601f8311600181146107d257600084156107c0578287015190505b6107ca858261074c565b865550610832565b601f1984166107e0866105bc565b60005b82811015610808578489015182556001820191506020850194506020810190506107e3565b868310156108255784890151610821601f89168261072e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108658261083a565b9050919050565b6108758161085a565b82525050565b6000602082019050610890600083018461086c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108d082610490565b91506108db83610490565b92508282019050808211156108f3576108f2610896565b5b92915050565b61090281610490565b82525050565b600060608201905061091d600083018661086c565b61092a60208301856108f9565b61093760408301846108f9565b949350505050565b600060208201905061095460008301846108f9565b92915050565b610e56806109696000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610aaa565b60405180910390f35b6100d060048036038101906100cb9190610b65565b610292565b6040516100dd9190610bc0565b60405180910390f35b6100ee6102b5565b6040516100fb9190610bea565b60405180910390f35b61011e60048036038101906101199190610c05565b6102bf565b60405161012b9190610bc0565b60405180910390f35b61013c6102ee565b6040516101499190610c74565b60405180910390f35b61016c60048036038101906101679190610c8f565b6102f7565b6040516101799190610bea565b60405180910390f35b61018a61033f565b6040516101979190610aaa565b60405180910390f35b6101ba60048036038101906101b59190610b65565b6103d1565b6040516101c79190610bc0565b60405180910390f35b6101ea60048036038101906101e59190610cbc565b6103f4565b6040516101f79190610bea565b60405180910390f35b60606003805461020f90610d2b565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610d2b565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60008061029d61047b565b90506102aa818585610483565b600191505092915050565b6000600254905090565b6000806102ca61047b565b90506102d7858285610495565b6102e285858561052a565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461034e90610d2b565b80601f016020809104026020016040519081016040528092919081815260200182805461037a90610d2b565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b5050505050905090565b6000806103dc61047b565b90506103e981858561052a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b610490838383600161061e565b505050565b60006104a184846103f4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156105245781811015610514578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161050b93929190610d6b565b60405180910390fd5b6105238484848403600061061e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361059c5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105939190610da2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361060e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106059190610da2565b60405180910390fd5b6106198383836107f5565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036106905760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016106879190610da2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107025760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106f99190610da2565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156107ef578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107e69190610bea565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084757806002600082825461083b9190610dec565b9250508190555061091a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156108d3578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108ca93929190610d6b565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361096357806002600082825403925050819055506109b0565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a0d9190610bea565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a54578082015181840152602081019050610a39565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a7c82610a1a565b610a868185610a25565b9350610a96818560208601610a36565b610a9f81610a60565b840191505092915050565b60006020820190508181036000830152610ac48184610a71565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afc82610ad1565b9050919050565b610b0c81610af1565b8114610b1757600080fd5b50565b600081359050610b2981610b03565b92915050565b6000819050919050565b610b4281610b2f565b8114610b4d57600080fd5b50565b600081359050610b5f81610b39565b92915050565b60008060408385031215610b7c57610b7b610acc565b5b6000610b8a85828601610b1a565b9250506020610b9b85828601610b50565b9150509250929050565b60008115159050919050565b610bba81610ba5565b82525050565b6000602082019050610bd56000830184610bb1565b92915050565b610be481610b2f565b82525050565b6000602082019050610bff6000830184610bdb565b92915050565b600080600060608486031215610c1e57610c1d610acc565b5b6000610c2c86828701610b1a565b9350506020610c3d86828701610b1a565b9250506040610c4e86828701610b50565b9150509250925092565b600060ff82169050919050565b610c6e81610c58565b82525050565b6000602082019050610c896000830184610c65565b92915050565b600060208284031215610ca557610ca4610acc565b5b6000610cb384828501610b1a565b91505092915050565b60008060408385031215610cd357610cd2610acc565b5b6000610ce185828601610b1a565b9250506020610cf285828601610b1a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d4357607f821691505b602082108103610d5657610d55610cfc565b5b50919050565b610d6581610af1565b82525050565b6000606082019050610d806000830186610d5c565b610d8d6020830185610bdb565b610d9a6040830184610bdb565b949350505050565b6000602082019050610db76000830184610d5c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df782610b2f565b9150610e0283610b2f565b9250828201905080821115610e1a57610e19610dbd565b5b9291505056fea2646970667358221220f413ecdb821df363531c0a0bcc98dfeb9baf7e41031710ae13ffb1596f19db2b64736f6c634300081c0033\",\n    \"linkReferences\": {},\n    \"deployedLinkReferences\": {}\n}","import { transferAction, getBalanceAction, deployTokenAction } from \"./actions\";\n\nexport const abstractPlugin = {\n\tname: \"abstract\",\n\tdescription: \"Abstract Plugin for Eliza\",\n\tactions: [transferAction, getBalanceAction, deployTokenAction],\n\tevaluators: [],\n\tproviders: [],\n};\n\nexport default abstractPlugin;\n"],"mappings":";AACA;AAAA,EAMC;AAAA,EAEA,eAAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;;;ACZP,SAAS,iBAAiB;AAC1B,SAAS,SAAS;AAEX,IAAM,oBAAoB,EAAE,OAAO;AAAA,EACzC,kBAAkB,EAChB,OAAO,EACP,IAAI,GAAG,8BAA8B,EACrC,OAAO,CAAC,YAAY,UAAU,SAAS,EAAE,QAAQ,MAAM,CAAC,GAAG;AAAA,IAC3D,SAAS;AAAA,EACV,CAAC;AAAA,EACF,sBAAsB,EACpB,OAAO,EACP,IAAI,GAAG,kCAAkC,EACzC,OAAO,CAAC,QAAQ,oBAAoB,KAAK,GAAG,GAAG;AAAA,IAC/C,SACC;AAAA,EACF,CAAC;AACH,CAAC;AAID,eAAsB,uBACrB,SAC0B;AAC1B,MAAI;AACH,UAAM,SAAS;AAAA,MACd,kBAAkB,QAAQ,WAAW,kBAAkB;AAAA,MACvD,sBAAsB,QAAQ,WAAW,sBAAsB;AAAA,IAChE;AAEA,WAAO,kBAAkB,MAAM,MAAM;AAAA,EACtC,SAAS,OAAO;AACf,QAAI,iBAAiB,EAAE,UAAU;AAChC,YAAM,gBAAgB,MAAM,OAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,IAAI,OAAO,EAAE,EACpD,KAAK,IAAI;AACX,YAAM,IAAI;AAAA,QACT;AAAA,EAA8C,aAAa;AAAA,MAC5D;AAAA,IACD;AACA,UAAM;AAAA,EACP;AACD;;;AD3BA,SAAS,UAAU,aAAa,aAAAC,YAAW,kBAA6B;AACxE,SAAS,mBAAAC,wBAAuB;AAChC,SAAS,4BAA4B;AACrC,SAAS,KAAAC,UAAS;;;AEnBX,IAAM,cAAc;;;ACE3B,SAAS,2BAA2B;AAE7B,IAAM,gBAAgB,CAAC,YAA8C;AAC3E,QAAM,cAAc,QAAQ,WAAW,sBAAsB;AAC7D,MAAI,CAAC,aAAa;AACjB,UAAM,IAAI,MAAM,iCAAiC;AAAA,EAClD;AACA,SAAO,oBAAoB,KAAK,WAAW,EAAE;AAC9C;;;ACVA,SAAS,oBAAoB,YAAY;AACzC,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AAE7B,IAAM,qBAAqB,MAA6C;AAC9E,QAAM,SAAS,mBAAmB;AAAA,IACjC,OAAO;AAAA,IACP,WAAW,KAAK;AAAA,EACjB,CAAC,EAAE,OAAO,oBAAoB,CAAC;AAE/B,SAAO;AACR;;;ACXA;AAAA,EAEC;AAAA,EACA;AAAA,EACA,QAAAC;AAAA,EACA,aAAAC;AAAA,OAEM;AACP,SAAS,mBAAAC,kBAAiB,eAAe;AACzC,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB;AAoBrB,IAAM,iBAAiB,mBAAmB;AAAA,EAChD,OAAO;AAAA,EACP,WAAWC,MAAK;AACjB,CAAC;AAEM,IAAM,uBAAuB,mBAAmB;AAAA,EACtD,OAAOC;AAAA,EACP,WAAWD,MAAK;AACjB,CAAC;AAGD,eAAsB,eACrB,cAC0B;AAC1B,MAAIE,WAAU,YAAY,GAAG;AAC5B,WAAO,WAAW,YAAY;AAAA,EAC/B;AAEA,MAAI;AACJ,MAAI;AACH,UAAM,OAAO,UAAU,aAAa,KAAK,CAAC;AAC1C,UAAM,WAAW,MAAM,eAAe,cAAc,EAAE,KAAK,CAAC;AAC5D,QAAI,UAAU;AACb,gBAAU;AACV,kBAAY,IAAI,YAAY,IAAI,OAAO,QAAQ,EAAE;AAAA,IAClD;AAAA,EACD,SAAS,OAAO;AACf,gBAAY,MAAM,6BAA6B,KAAK;AAAA,EACrD;AAEA,SAAO,UAAU,WAAW,OAAO,IAAI;AACxC;AAEA,IAAM,SAAS;AAAA,EACd;AAAA,IACC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,EACX;AAAA,EACA;AAAA,IACC,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,EACX;AACD;AAEO,SAAS,eAAe,MAAc;AAC5C,QAAM,QAAQ,OAAO;AAAA,IACpB,CAACC,WAAUA,OAAM,OAAO,YAAY,MAAM,KAAK,YAAY;AAAA,EAC5D;AAEA,MAAI,CAAC,OAAO;AACX,UAAM,IAAI,MAAM,SAAS,IAAI,YAAY;AAAA,EAC1C;AAEA,SAAO;AACR;;;ALrCA,IAAM,iBAAiBC,GAAE,OAAO;AAAA,EAC/B,cAAcA,GAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAAA,EAC7C,WAAWA,GAAE,OAAO;AAAA,EACpB,QAAQA,GAAE,OAAO;AAAA,EACjB,QAAQA,GAAE,QAAQ;AAAA,EAClB,aAAaA,GAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAC7C,CAAC;AAED,IAAM,0BAA0BA,GAAE,OAAO;AAAA,EACxC,cAAcA,GACZ,OAAO,EACP,OAAOC,YAAW,EAAE,SAAS,wBAAwB,CAAC;AAAA,EACxD,WAAWD,GACT,OAAO,EACP,OAAOC,YAAW,EAAE,SAAS,4BAA4B,CAAC;AAAA,EAC5D,QAAQD,GAAE,OAAO;AAAA,EACjB,QAAQA,GAAE,QAAQ;AACnB,CAAC;AAUD,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BlB,IAAM,iBAAyB;AAAA,EAErC,MAAM;AAAA,EACN,SAAS;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA;AAAA,EAEA,UAAU,OAAO,YAA2B;AAC3C,UAAM,uBAAuB,OAAO;AACpC,WAAO;AAAA,EACR;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACR,SACA,SACA,OACA,UACA,aACsB;AA/HxB;AAgIE,IAAAE,aAAY,IAAI,yCAAyC;AAGnD,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAGN,iBAAa,iBAAiB,GAAG,aAAa,mBAAmB,CAAC,EAAE,QAAQ,IAAI;AAChF,UAAM,kBAAkB,eAAe;AAAA,MACtC,OAAO;AAAA,MACP,UAAU;AAAA,IACX,CAAC;AAGD,UAAM,WACL,MAAM,eAAe;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,MACT,YAAY,WAAW;AAAA,MACvB,QAAQ;AAAA,IACT,CAAC,GACA;AAEF,QAAI,eAAe,QAAQ;AAE3B,QAAI,QAAQ,aAAa;AACxB,YAAM,cAAc,MAAM,QAAQ,eAAe;AAAA,QAChD,aAAa,GAAG,QAAQ,WAAW,IAAI,QAAQ,OAAO,EAAE;AAAA,MACzD;AAEA,UAAI,SAAO,gDAAa,YAAb,mBAAsB,kBAAiB,UAAU;AAC3D,uBAAe,YAAY,QAAQ;AAAA,MACpC;AAEA,UAAI,CAAC,cAAc;AAClB,wBAAe,oBAAe,QAAQ,WAAW,MAAlC,mBAAqC;AAAA,MACrD;AAAA,IACD;AAEA,UAAM,oBAAoB,MAAM,eAAe,QAAQ,SAAS;AAEhE,UAAM,QAAQ;AAAA,MACb;AAAA,MACA,WAAW;AAAA,MACX,QAAQ,QAAQ,OAAO,SAAS;AAAA,MAChC,QAAQ,QAAQ;AAAA,IACjB;AACA,UAAM,SAAS,wBAAwB,UAAU,KAAK;AAEtD,QAAI,CAAC,OAAO,SAAS;AACpB,MAAAA,aAAY;AAAA,QACX;AAAA,QACA,OAAO,MAAM;AAAA,MACd;AACA,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM;AAAA,UACN,SAAS,EAAE,OAAO,OAAO,MAAM,SAAS,GAAG,MAAM;AAAA,QAClD,CAAC;AAAA,MACF;AACA,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,mBAAmB;AACvB,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACxD;AAEA,QAAI;AACH,YAAM,UAAU,cAAc,OAAO;AAErC,UAAI,SAAS;AACb,UAAI,WAAW;AACf,YAAM,gBAAgB,OAAO,KAAK,iBAAiB;AACnD,YAAM,EAAE,cAAAC,eAAc,WAAW,QAAQ,OAAO,IAAI,OAAO;AAE3D,UAAI,CAAC,eAAe;AACnB,SAAC,QAAQ,QAAQ,IAAI,MAAM,QAAQ,IAAI;AAAA,UACtC,qBAAqB,aAAa;AAAA,YACjC,SAASA;AAAA,YACT,KAAK;AAAA,YACL,cAAc;AAAA,UACf,CAAC;AAAA,UACD,qBAAqB,aAAa;AAAA,YACjC,SAASA;AAAA,YACT,KAAK;AAAA,YACL,cAAc;AAAA,UACf,CAAC;AAAA,QACF,CAAC;AAAA,MACF;AACA,UAAI;AACJ,YAAM,cAAc,WAAW,OAAO,SAAS,GAAG,QAAQ;AAE1D,UAAI,QAAQ;AACX,cAAM,iBAAkB,MAAM,qBAAqB;AAAA,UAClD,OAAOC;AAAA,UACP,QAAQ;AAAA,QACT,CAAC;AAED,YAAI,eAAe;AAClB,iBAAO,MAAM,eAAe,gBAAgB;AAAA,YAC3C,OAAOA;AAAA,YACP,IAAI;AAAA,YACJ,OAAO;AAAA,YACP,KAAK;AAAA,UACN,CAAC;AAAA,QACF,OAAO;AACN,iBAAO,MAAM,eAAe,cAAc;AAAA,YACzC,OAAOA;AAAA,YACP,SAASD;AAAA,YACT,KAAK;AAAA,YACL,cAAc;AAAA,YACd,MAAM,CAAC,WAAW,WAAW;AAAA,UAC9B,CAAC;AAAA,QACF;AAAA,MACD,OAAO;AACN,cAAM,eAAe,mBAAmB;AACxC,YAAI,eAAe;AAClB,iBAAO,MAAM,aAAa,gBAAgB;AAAA,YACzC;AAAA,YACA,OAAOC;AAAA,YACP,IAAI;AAAA,YACJ,OAAO;AAAA,YACP,KAAK;AAAA,UACN,CAAC;AAAA,QACF,OAAO;AACN,iBAAO,MAAM,aAAa,cAAc;AAAA,YACvC;AAAA,YACA,OAAOA;AAAA,YACP,SAASD;AAAA,YACT,KAAK;AAAA,YACL,cAAc;AAAA,YACd,MAAM,CAAC,WAAW,WAAW;AAAA,UAC9B,CAAC;AAAA,QACF;AAAA,MACD;AAEA,MAAAD,aAAY;AAAA,QACX,sDAAsD,IAAI;AAAA,MAC3D;AACA,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,qDAAqD,YAAY,aAAa,QAAQ,CAAC,IAAI,MAAM,OAAO,SAAS,UAAU,SAAS,QAAQ,eAAe,uBAAuB,IAAI;AAAA,UAC5L,SAAS;AAAA,YACR;AAAA,YACA,aAAa,YAAY,aAAa,QAAQ;AAAA,YAC9C;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAEA,aAAO;AAAA,IACR,SAAS,OAAO;AACf,MAAAA,aAAY,MAAM,gCAAgC,KAAK;AACvD,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,8BAA8B,MAAM,OAAO;AAAA,UACjD,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,QACjC,CAAC;AAAA,MACF;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,UAAU;AAAA,IACT;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;;;AMxaA;AAAA,EAMC,cAAAG;AAAA,EAEA,eAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,gBAAAC;AAAA,OACM;AAGP,SAAS,YAAAC,WAAU,eAAAC,cAAa,aAAAC,kBAAiB;AACjD,SAAS,KAAAC,UAAS;AASlB,IAAM,gBAAgBC,GAAE,OAAO;AAAA,EAC9B,cAAcA,GAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAAA,EAC7C,eAAeA,GAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAAA,EAC9C,aAAaA,GAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAC7C,CAAC;AAQD,IAAM,kBAAkBA,GAAE,OAAO;AAAA,EAChC,cAAcA,GACZ,OAAO,EACP,OAAOC,YAAW,EAAE,SAAS,wBAAwB,CAAC;AAAA,EACxD,eAAeD,GACb,OAAO,EACP,OAAOC,YAAW,EAAE,SAAS,wBAAwB,CAAC;AACzD,CAAC;AAED,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBjB,IAAM,mBAA2B;AAAA,EACvC,MAAM;AAAA,EACN,SAAS;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,UAAU,OAAO,SAAwB,aAAqB;AAC7D,UAAM,uBAAuB,OAAO;AACpC,WAAO;AAAA,EACR;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACR,SACA,SACA,OACA,UACA,aACsB;AAzFxB;AA0FE,IAAAC,aAAY,IAAI,0CAA0C;AAGpD,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAGN,iBAAa,iBAAiB,GAAG,aAAa,mBAAmB,CAAC,EAAE,QAAQ,IAAI;AAChF,UAAM,iBAAiBC,gBAAe;AAAA,MACrC,OAAO;AAAA,MACP,UAAU;AAAA,IACX,CAAC;AAGD,UAAM,WACL,MAAMC,gBAAe;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,MACvB,QAAQ;AAAA,IACT,CAAC,GACA;AAEF,QAAI;AACH,YAAM,UAAU,cAAc,OAAO;AACrC,YAAM,iBAAiB,QAAQ,iBAAiB,QAAQ;AAGxD,YAAM,kBAAkB,MAAM,eAAe,cAAc;AAC3D,UAAI,CAAC,iBAAiB;AACrB,cAAM,IAAI,MAAM,6BAA6B;AAAA,MAC9C;AAEA,UAAI,eAAe,QAAQ;AAE3B,UAAI,QAAQ,aAAa;AACxB,cAAM,cAAc,MAAM,QAAQ,eAAe;AAAA,UAChDC,cAAa,GAAG,QAAQ,WAAW,IAAI,QAAQ,OAAO,EAAE;AAAA,QACzD;AAEA,YAAI,SAAO,gDAAa,YAAb,mBAAsB,kBAAiB,UAAU;AAC3D,yBAAe,YAAY,QAAQ;AAAA,QACpC;AAEA,YAAI,CAAC,cAAc;AAClB,0BAAe,oBAAe,QAAQ,WAAW,MAAlC,mBAAqC;AAAA,QACrD;AAAA,MACD;AAEA,YAAM,SAAS,gBAAgB,UAAU;AAAA,QACxC,cAAc,gBAAgB;AAAA,QAC9B,eAAe;AAAA,MAChB,CAAC;AAGD,UAAI,CAAC,OAAO,SAAS;AACpB,QAAAJ,aAAY,MAAM,yCAAyC;AAC3D,YAAI,UAAU;AACb,mBAAS;AAAA,YACR,MAAM;AAAA,YACN,SAAS,EAAE,OAAO,0BAA0B;AAAA,UAC7C,CAAC;AAAA,QACF;AACA,eAAO;AAAA,MACR;AAEA,UAAI;AACJ,UAAI;AACJ,UAAI;AAGJ,UAAI,OAAO,KAAK,iBAAiB,aAAa;AAC7C,kBAAU,MAAM,qBAAqB,WAAW;AAAA,UAC/C,SAAS;AAAA,QACV,CAAC;AACD,iBAAS;AACT,mBAAW;AAAA,MACZ,OAAO;AACN,SAAC,SAAS,UAAU,MAAM,IAAI,MAAM,QAAQ,IAAI;AAAA,UAC/C,qBAAqB,aAAa;AAAA,YACjC,SAAS,OAAO,KAAK;AAAA,YACrB,KAAKK;AAAA,YACL,cAAc;AAAA,YACd,MAAM,CAAC,eAAe;AAAA,UACvB,CAAC;AAAA,UACD,qBAAqB,aAAa;AAAA,YACjC,SAAS,OAAO,KAAK;AAAA,YACrB,KAAKA;AAAA,YACL,cAAc;AAAA,UACf,CAAC;AAAA,UACD,qBAAqB,aAAa;AAAA,YACjC,SAAS,OAAO,KAAK;AAAA,YACrB,KAAKA;AAAA,YACL,cAAc;AAAA,UACf,CAAC;AAAA,QACF,CAAC;AAAA,MACF;AAEA,YAAM,mBAAmBC,aAAY,SAAS,QAAQ;AAEtD,MAAAN,aAAY,QAAQ,+BAA+B,eAAe,EAAE;AACpE,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,eAAe,eAAe,KAAK,gBAAgB,IAAI,MAAM;AAAA,UACnE,SAAS,EAAE,SAAS,kBAAkB,OAAe;AAAA,QACtD,CAAC;AAAA,MACF;AAEA,aAAO;AAAA,IACR,SAAS,OAAO;AACf,MAAAA,aAAY,MAAM,2BAA2B,KAAK;AAClD,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,2BAA2B,MAAM,OAAO;AAAA,UAC9C,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,QACjC,CAAC;AAAA,MACF;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,UAAU;AAAA,IACT;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;;;ACvRA;AAAA,EAMC,cAAAO;AAAA,EAEA,eAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,gBAAAC;AAAA,OACM;AAEP,SAAS,kBAA6B;AACtC,SAAS,mBAAAC,wBAAuB;AAChC;AAAA,EAEC,wBAAAC;AAAA,OACM;AACP,SAAS,KAAAC,UAAS;;;ACrBlB;AAAA,EACI,SAAW;AAAA,EACX,cAAgB;AAAA,EAChB,YAAc;AAAA,EACd,KAAO;AAAA,IACH;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,WAAa;AAAA,MACb,QAAU;AAAA,QACN;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,WAAa;AAAA,MACb,QAAU;AAAA,QACN;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,SAAW;AAAA,UACX,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU,CAAC;AAAA,MACX,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU,CAAC;AAAA,MACX,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU,CAAC;AAAA,MACX,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU,CAAC;AAAA,MACX,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,IACA;AAAA,MACI,QAAU;AAAA,QACN;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,QACA;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAQ;AAAA,MACR,SAAW;AAAA,QACP;AAAA,UACI,cAAgB;AAAA,UAChB,MAAQ;AAAA,UACR,MAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,iBAAmB;AAAA,MACnB,MAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,UAAY;AAAA,EACZ,gBAAkB,CAAC;AAAA,EACnB,wBAA0B,CAAC;AAC/B;;;ADxTA,IAAM,eAAeC,GAAE,OAAO;AAAA,EAC7B,MAAMA,GAAE,OAAO;AAAA,EACf,QAAQA,GAAE,OAAO;AAAA,EACjB,eAAeA,GAAE,OAAO;AAAA,EACxB,QAAQA,GAAE,QAAQ;AACnB,CAAC;AAED,IAAMC,mBAAkBD,GAAE,OAAO;AAAA,EAChC,MAAMA,GAAE,OAAO,EAAE,IAAI,GAAG,kBAAkB;AAAA,EAC1C,QAAQA,GACN,OAAO,EACP,IAAI,GAAG,oBAAoB,EAC3B,IAAI,GAAG,qCAAqC;AAAA,EAC9C,eAAeA,GACb,OAAO,EACP,OAAO,CAAC,QAAQ,CAAC,OAAO,MAAM,OAAO,GAAG,CAAC,KAAK,OAAO,GAAG,IAAI,GAAG;AAAA,IAC/D,SAAS;AAAA,EACV,CAAC;AAAA,EACF,QAAQA,GAAE,QAAQ;AACnB,CAAC;AASD,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBhB,IAAM,oBAA4B;AAAA,EACxC,MAAM;AAAA,EACN,SAAS;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,UAAU,OAAO,YAA2B;AAC3C,UAAM,uBAAuB,OAAO;AACpC,WAAO;AAAA,EACR;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACR,SACA,SACA,OACA,UACA,aACsB;AACtB,IAAAE,aAAY,IAAI,2CAA2C;AAGrD,QAAI,eAAe;AACnB,QAAI,CAAC,cAAc;AACf,qBAAgB,MAAM,QAAQ,aAAa,OAAO;AAAA,IACtD,OAAO;AACH,qBAAe,MAAM,QAAQ,yBAAyB,YAAY;AAAA,IACtE;AAEN,iBAAa,iBAAiB,GAAG,aAAa,mBAAmB,CAAC,EAAE,QAAQ,IAAI;AAChF,UAAM,gBAAgBC,gBAAe;AAAA,MACpC,OAAO;AAAA,MACP,UAAU;AAAA,IACX,CAAC;AAED,UAAM,WACL,MAAMC,gBAAe;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,MACT,YAAYC,YAAW;AAAA,MACvB,QAAQ;AAAA,IACT,CAAC,GACA;AAGF,UAAM,SAASJ,iBAAgB,UAAU,OAAO;AAChD,QAAI,CAAC,OAAO,SAAS;AACpB,MAAAC,aAAY,MAAM,4CAA4C;AAAA,QAC7D,QAAQ,OAAO,MAAM;AAAA,MACtB,CAAC;AACD,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM;AAAA,UACN,SAAS,EAAE,OAAO,gCAAgC;AAAA,QACnD,CAAC;AAAA,MACF;AACA,aAAO;AAAA,IACR;AAEA,QAAI;AACH,YAAM,UAAU,cAAc,OAAO;AACrC,YAAM,SAAS,WAAW,QAAQ,aAAa;AAC/C,UAAI;AAEJ,UAAI,QAAQ,QAAQ;AACnB,cAAM,iBAAkB,MAAMI,sBAAqB;AAAA,UAClD,OAAOC;AAAA,UACP,QAAQ;AAAA,QACT,CAAC;AAED,eAAO,MAAM,eAAe,eAAe;AAAA,UAC1C,KAAK,mBAAW;AAAA,UAChB,UAAU,mBAAW;AAAA,UACrB,MAAM,CAAC,OAAO,KAAK,MAAM,OAAO,KAAK,QAAQ,MAAM;AAAA,QACpD,CAAC;AAAA,MACF,OAAO;AACN,cAAM,eAAe,mBAAmB;AAExC,eAAO,MAAM,aAAa,eAAe;AAAA,UACxC,OAAOA;AAAA,UACP;AAAA,UACA,KAAK,mBAAW;AAAA,UAChB,UAAU,mBAAW;AAAA,UACrB,MAAM,CAAC,OAAO,KAAK,MAAM,OAAO,KAAK,QAAQ,MAAM;AAAA,UACnD,KAAK;AAAA,QACN,CAAC;AAAA,MACF;AAGA,YAAM,UAAU,MAAM,qBAAqB,0BAA0B;AAAA,QACpE;AAAA,MACD,CAAC;AACD,YAAM,kBAAkB,QAAQ;AAEhC,MAAAL,aAAY;AAAA,QACX,iDAAiD,eAAe,uBAAuB,IAAI;AAAA,MAC5F;AACA,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,UAAU,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,MAAM,8CAA8C,eAAe,0BAA0B,IAAI;AAAA,UACnJ,SAAS;AAAA,YACR;AAAA,YACA,WAAW,OAAO,KAAK;AAAA,YACvB,aAAa,OAAO,KAAK;AAAA,YACzB;AAAA,YACA,iBAAiB;AAAA,UAClB;AAAA,QACD,CAAC;AAAA,MACF;AAEA,YAAM,WAAW;AAAA,QAChB,cAAc;AAAA,QACd,MAAM,OAAO,KAAK;AAAA,QAClB,QAAQ,OAAO,KAAK;AAAA,QACpB,eAAe,OAAO,OAAO,KAAK,aAAa;AAAA,MAChD;AAEA,YAAM,QAAQ,eAAe,aAAa;AAAA,QACzC,IAAIM,cAAa,GAAG,OAAO,KAAK,MAAM,IAAI,QAAQ,OAAO,EAAE;AAAA,QAC3D,QAAQ,QAAQ;AAAA,QAChB,SAAS;AAAA,UACR,MAAM,mBAAmB,OAAO,KAAK,IAAI,aAAa,OAAO,KAAK,MAAM,0BAA0B,eAAe;AAAA,UACjH,GAAG;AAAA,UACH,QAAQ;AAAA,QACT;AAAA,QACA,SAAS,QAAQ;AAAA,QACjB,QAAQA,cAAa,UAAU,QAAQ,OAAO,EAAE;AAAA,QAChD,WAAW,KAAK,IAAI;AAAA,MACrB,CAAC;AACD,MAAAN,aAAY,QAAQ,qCAAqC,QAAQ;AAEjE,aAAO;AAAA,IACR,SAAS,OAAO;AACf,MAAAA,aAAY,MAAM,kCAAkC,KAAK;AACzD,UAAI,UAAU;AACb,iBAAS;AAAA,UACR,MAAM,0BAA0B,MAAM,OAAO;AAAA,UAC7C,SAAS,EAAE,OAAO,MAAM,QAAQ;AAAA,QACjC,CAAC;AAAA,MACF;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,UAAU;AAAA,IACT;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,SAAS;AAAA,UACR,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;;;AE1QO,IAAM,iBAAiB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,gBAAgB,kBAAkB,iBAAiB;AAAA,EAC7D,YAAY,CAAC;AAAA,EACb,WAAW,CAAC;AACb;AAEA,IAAO,gBAAQ;","names":["elizaLogger","isAddress","abstractTestnet","z","http","isAddress","abstractTestnet","http","abstractTestnet","isAddress","token","z","isAddress","elizaLogger","tokenAddress","abstractTestnet","ModelClass","elizaLogger","composeContext","generateObject","stringToUuid","erc20Abi","formatUnits","isAddress","z","z","isAddress","elizaLogger","composeContext","generateObject","ModelClass","stringToUuid","erc20Abi","formatUnits","ModelClass","elizaLogger","composeContext","generateObject","stringToUuid","abstractTestnet","createAbstractClient","z","z","validatedSchema","elizaLogger","composeContext","generateObject","ModelClass","createAbstractClient","abstractTestnet","stringToUuid"]}